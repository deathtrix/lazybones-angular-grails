buildscript {
	ext {
		grailsVersion = project.grailsVersion
	}
	repositories {
		mavenLocal()
		jcenter()
		maven { url "https://repo.grails.org/grails/core" }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.1.1'
		classpath "com.craigburke.angular:angular-template-asset-pipeline:2.0.7"
		classpath "com.craigburke.angular:angular-annotate-asset-pipeline:2.1.0"
		classpath 'com.moowork.gradle:gradle-node-plugin:0.6'
	}
}

plugins {
	id "io.spring.dependency-management" version "0.4.0.RELEASE"
}

project.ext {
	warFile = file("target/${project.warName}")
	jasmineDependencies = ['karma', 'karma-jasmine@2_0', 'karma-phantomjs-launcher']
	karmaExec = file('node_modules/karma/bin/karma')
	karmaConfig = 'src/integration-test/js/karma.conf.js'
}

apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'asset-pipeline'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-web'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'com.moowork.node'

node {
	version = '0.11.13'
	distBaseUrl = 'http://nodejs.org/dist'
	download = true
	workDir = file("${project.buildDir}/nodejs")
}

clean {
	delete warFile
	delete file('node_modules')
}

assets {
	minifyJs = true
	minifyCss = true
}

repositories {
	mavenLocal()
	maven { url "https://repo.grails.org/grails/core" }
	flatDir {
		dirs 'lib'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.grails:grails-bom:$project.grailsVersion"
	}
	applyMavenExclusions false
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-logging"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "org.springframework.boot:spring-boot-autoconfigure"
	compile "org.springframework.boot:spring-boot-starter-tomcat"
	compile "org.grails:grails-dependencies"
	compile "org.grails:grails-web-boot"

	compile "org.grails.plugins:hibernate"
	compile "org.grails.plugins:cache"
	compile "org.hibernate:hibernate-ehcache"

	compile "com.craigburke.angular:angular-template-asset-pipeline:2.0.7"
	compile "com.craigburke.angular:angular-annotate-asset-pipeline:2.1.0"

	compile "org.grails.plugins:cache"

	runtime "org.grails.plugins:asset-pipeline"
	runtime "org.grails.plugins:scaffolding"

	testCompile "org.grails:grails-plugin-testing"
	testCompile "org.grails.plugins:geb"

	// Note: It is recommended to update to a more robust driver (Chrome, Firefox etc.)
	testRuntime 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.44.0'

	testCompile "com.github.detro.ghostdriver:phantomjsdriver:1.1.0"

	//test("com.github.detro.ghostdriver:phantomjsdriver:1.1.0") {
	//	transitive = false
	//} 

	console "org.grails:grails-console"
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}

//task debug(type: GrailsTask) {
//	command = 'run-app'
//	jvmOptions {
//		jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,address=5005'
//		minHeapSize = '1g'
//		maxHeapSize = '1g'
//		jvmArgs "-XX:MaxPermSize=512m"
//	}
//}

task setupPhantomJS(type: NpmTask) {
	outputs.dir file('node_modules')
	args = ['install', 'phantomjs', '--loglevel', 'error']
}

task setupKarma(type: NpmTask) {
	outputs.dir file('node_modules')
	args = ['install', 'karma', '--loglevel', 'error']
}

task setupJasmine(type: NpmTask) {
	outputs.dir file('node_modules')
	args = ['install'] + jasmineDependencies + ['--loglevel', 'error']
}

task jasmineRun(type: NodeTask, dependsOn: ['setupPhantomJS', 'setupKarma', 'setupJasmine']) {
	script = karmaExec
	args = ['start', karmaConfig, '--single-run']
}

task jasmineWatch(type: NodeTask, dependsOn: 'setupJasmine') {
	script = karmaExec
	args = ['start', karmaConfig]
}

//test.dependsOn jasmineRun
